CMAKE_MINIMUM_REQUIRED(VERSION 2.6 FATAL_ERROR)

PROJECT(agent)

set(CMAKE_CXX_FLAGS "-Wall -Wextra -ggdb3 -pthread -std=c++11")

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/Modules/")



add_custom_target(clean-cmake-files
  COMMAND ${CMAKE_COMMAND} -P clean-all.cmake
  )

add_custom_target(fclean
  COMMAND ${CMAKE_BUILD_TOOL} clean
  COMMAND ${CMAKE_COMMAND} -P clean-all.cmake
  )

add_custom_target(re
  COMMAND ${CMAKE_BUILD_TOOL} fclean
  COMMAND ${CMAKE_BUILD_TOOL} all
  )


SET(SOURCES)

SET(SUBDIR
  core
  network
  protocol
  slam
  utils
  )

SET(INCLUDE_DIR "${PROJECT_SOURCE_DIR}/include")




FIND_PACKAGE(PCL 1.7 REQUIRED COMPONENTS common io)
INCLUDE_DIRECTORIES(${PCL_INCLUDE_DIRS})
LINK_DIRECTORIES(${PCL_LIBRARY_DIRS})
ADD_DEFINITIONS(${PCL_DEFINITIONS})


include(LibFindMacros)
set(Jsoncpp_PROCESS_INCLUDES Jsoncpp_INCLUDE_DIR)
set(Jsoncpp_PROCESS_LIBS Jsoncpp_LIBRARY)
FIND_PACKAGE(JsonCpp)
INCLUDE_DIRECTORIES(${Jsoncpp_INCLUDE_DIR})
LINK_DIRECTORIES(${Jsoncpp_LIBRARY})

ADD_SUBDIRECTORY("${PROJECT_SOURCE_DIR}/src")
ADD_SUBDIRECTORY(${INCLUDE_DIR})

INCLUDE_DIRECTORIES(${INCLUDE_DIR})

ADD_EXECUTABLE(agent ${SOURCES})

TARGET_LINK_LIBRARIES(agent ${PCL_COMMON_LIBRARIES} ${PCL_IO_LIBRARIES})
TARGET_LINK_LIBRARIES(agent ${Jsoncpp_LIBRARIES})
